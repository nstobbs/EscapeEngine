Entity Component System

Entity {ID} - MeshObject, GridObject, BoidObject, CameraObject, Anything
Component {Data} - Transforms, MeshData{Vertices, Indices}, Physics, Shaders, Camera
Systems {Processing} - RenderSystem(MeshData + Shaders + Transforms & CameraInfo), PhysicsSystem(Transforms + Physics), InputSystem(Window Inputs + Transforms)


Programs Design

Classes:
    App:
        Handles the
        Start Up
        MainLoop
        Teardown.
        Takes A Scene as a Inputs and renders it to screen.

    Scene:
        Stores all of the Entities and Component.
        Only Stores One Active CameraComponent.
        std::vector<Entity> Entities;
        CameraComponent ActiveCamera;
        unordered_map<TransformsComponent> TransformsComponents;
        unordered_map<MeshComponent> MeshComponents;
        unordered_map<ShaderComponent> ShaderComponents;
        unordered_map<PhysicsComponent> PhysicsComponents;


Entities;
uint32_t = Entity;

Struct:
    CameraComponent:
        Stores the Camera Data of a Entity;
        vec3 Position;
        vec3 Up;
        vec3 Front;
        float FocalLength;

    TransformsComponent:
        Stores the Position Data of a Entity.
        vec3 or mat4 Position;

    MeshComponent:
        Stores the Mesh Data of a Entity;
        uint32_t VerticesCount;
        std::vector<uint32_t> Vertices;
        std::vector<uint32_t> Indices;

    ShaderComponent:
        Stores the Shader / Material Data of a Entity;
        std::string FragmentFilepath;
        std::string FragmentFilepath;

    PhysicsComponent:
        Stores the Data related to Physics of a Entity.
        In Our case we will be using this Components
        to run our Boids Simulations.
        So storing Data that the PhysicsSystem will
        be using later. 

TODO List:

Clean up
    The applications keeps crashing on exit because 
    we haven't been tidying up our memory and 
    objects before closing the app.

Compute
    Look into how to get the compute pipeline working
    and thinking about using it for the boids Physics
    system. 

Refactor
    There is loads of todos around the code base that 
    needs addressing and parts of the loading into engine
    needs improving. If we want to keep this as a engine for 
    long term then we should really take another looking
    at how we manage data on the gpu and making sure that 
    we only sure / store the unquire information that is 
    required. Once this is sorted we could then start 
    looking at how to add Entities into scene while 
    in the main loop instead of start time only.

Bugs
    Creating a Entity for the Viking Room and City models
    only the viking room model is displayed in the scene.

Boid System / Class / Object / Thing
    each boid is just an transforms and a direction vector
    each frame we take the Position and move it by the vector.
    Each frame we calculate the direction base of a computer
    shader that work on a data set of Position and directions of
    each boid.

Boids TODO List
    User Create an BoidsWorld* Entity. *TmpName
        This Entity store all of the information about the world the
        boids live. Like the bounding box, Settings / Thresholds,
        MeshComponent.
    BoidsComponent
        Sim Settings
        Bounding Box

    BoidSystem
        Runs on (Entities that have a MeshComponent, BoidsComponent, TransformsComponent)
        Runs"submits" the Compute Shader to compute update the 
        position and direction of each boid.

    Update RenderSystem;
        Add a way for the renderSystem to handle the rendering
        of the boids.  

    Create a Storage Buffer with Boids Position, Direction data.
    Feed this Data into Compute Shader and calculate the new Position and Direction.
    
